{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww24980\viewh14960\viewkind0
\deftab720
\pard\pardeftab720\sl220\partightenfactor0

\f0\fs20 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # A very simple Flask Hello World app for you to get started with...\
\
from flask import Flask\
import pandas as pd\
import numpy as np\
from sklearn.preprocessing import StandardScaler\
import pickle\
\
from flask import Flask, jsonify, request\
from flask_restful import Api, Resource, reqparse\
\
app = Flask(__name__)\
\
@app.route('/')\
def hello_world():\
\'a0 \'a0 return 'Hello from Flask!'\
\
@app.route('/final',methods=['GET'])\
def new_fund():\
\'a0 \'a0 #Get arguments\
\'a0 \'a0 parser=reqparse.RequestParser()\
\'a0 \'a0 parser.add_argument("s1", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s2", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s3", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s4", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s5", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s6", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s7", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s8", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s9", action="store",type=int)\
\'a0 \'a0 parser.add_argument("s10", action="store",type=int)\
\
\'a0 \'a0 args = parser.parse_args()\
\
\'a0 \'a0 # Loading data from main model\
\'a0 \'a0 X_train = pd.read_csv("/home/AJHoeft/mysite/X_train_select_2.csv")\
\
\'a0 \'a0 # Feature scaling\
\'a0 \'a0 scaler = StandardScaler()\
\
\'a0 \'a0 X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train))\
\
\'a0 \'a0 # Load the ML model\
\'a0 \'a0 filename = '/home/AJHoeft/mysite/finalized_model.model'\
\'a0 \'a0 loaded_model = pickle.load(open(filename,'rb'))\
\
\'a0 \'a0 df_new = [[args["s1"],args["s2"],args["s3"],args["s4"],args["s5"],args["s6"],args["s7"],args["s8"],args["s9"],args["s10"]]]\
\'a0 \'a0 X_test_scaled_new = pd.DataFrame(scaler.transform(df_new))\
\'a0 \'a0 predicted = loaded_model.predict(X_test_scaled_new)\
\
\'a0 \'a0 y_pred_proba_rf = loaded_model.predict_proba(X_test_scaled_new)\
\
\'a0 \'a0 y_pred = y_pred_proba_rf[0]\
\
\'a0 \'a0 if (y_pred[0] > .9):\
\'a0 \'a0 \'a0 \'a0 return('This individual is already likely to purchase a policy and does not need a letter')\
\'a0 \'a0 elif ((y_pred[0] >= .5) & (y_pred[0] <= .9)):\
\'a0 \'a0 \'a0 \'a0 return jsonify('This individual should receive a mailing')\
\'a0 \'a0 else:\
\'a0 \'a0 \'a0 \'a0 return jsonify('This individual should not receive a mailing')}